// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hermesdFieldNames          = builder.RawFieldNames(&Hermesd{})
	hermesdRows                = strings.Join(hermesdFieldNames, ",")
	hermesdRowsExpectAutoSet   = strings.Join(stringx.Remove(hermesdFieldNames, "`create_time`", "`update_time`"), ",")
	hermesdRowsWithPlaceHolder = strings.Join(stringx.Remove(hermesdFieldNames, "`aletname`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheHermesdAletnamePrefix = "cache:hermesd:aletname:"
)

type (
	hermesdModel interface {
		Insert(ctx context.Context, data *Hermesd) (sql.Result, error)
		FindOne(ctx context.Context, aletname string) (*Hermesd, error)
		Update(ctx context.Context, data *Hermesd) error
		Delete(ctx context.Context, aletname string) error
	}

	defaultHermesdModel struct {
		sqlc.CachedConn
		table string
	}

	Hermesd struct {
		Aletname        string `db:"aletname"`        // aletname
		Aggeraterules   string `db:"aggeraterules"`   // aggerate rules
		Receiveraddress string `db:"receiveraddress"` // receiver address
		Returnvalueflag string `db:"returnvalueflag"` // return value flag
	}
)

func newHermesdModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultHermesdModel {
	return &defaultHermesdModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`hermesd`",
	}
}

func (m *defaultHermesdModel) Insert(ctx context.Context, data *Hermesd) (sql.Result, error) {
	hermesdAletnameKey := fmt.Sprintf("%s%v", cacheHermesdAletnamePrefix, data.Aletname)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, hermesdRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Aletname, data.Aggeraterules, data.Receiveraddress, data.Returnvalueflag)
	}, hermesdAletnameKey)
	return ret, err
}

func (m *defaultHermesdModel) FindOne(ctx context.Context, aletname string) (*Hermesd, error) {
	hermesdAletnameKey := fmt.Sprintf("%s%v", cacheHermesdAletnamePrefix, aletname)
	var resp Hermesd
	err := m.QueryRowCtx(ctx, &resp, hermesdAletnameKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `aletname` = ? limit 1", hermesdRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, aletname)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHermesdModel) Update(ctx context.Context, data *Hermesd) error {
	hermesdAletnameKey := fmt.Sprintf("%s%v", cacheHermesdAletnamePrefix, data.Aletname)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `aletname` = ?", m.table, hermesdRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Aggeraterules, data.Receiveraddress, data.Returnvalueflag, data.Aletname)
	}, hermesdAletnameKey)
	return err
}

func (m *defaultHermesdModel) Delete(ctx context.Context, aletname string) error {
	hermesdAletnameKey := fmt.Sprintf("%s%v", cacheHermesdAletnamePrefix, aletname)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `aletname` = ?", m.table)
		return conn.ExecCtx(ctx, query, aletname)
	}, hermesdAletnameKey)
	return err
}

func (m *defaultHermesdModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheHermesdAletnamePrefix, primary)
}

func (m *defaultHermesdModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `aletname` = ? limit 1", hermesdRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHermesdModel) tableName() string {
	return m.table
}
